import pytest
from math import inf
from inorbit_edge.utils import encode_floating_point_list

# Data from Gazebo simulation
TEST_RANGE = (
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    3.453223466873169,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    2.6174943447113037,
    2.5482518672943115,
    2.484649658203125,
    2.421760082244873,
    2.375002384185791,
    2.3119006156921387,
    2.292886257171631,
    2.2166736125946045,
    2.1875782012939453,
    2.1466281414031982,
    2.109262704849243,
    2.0732874870300293,
    2.0260651111602783,
    2.011146306991577,
    1.9837716817855835,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    1.5204654932022095,
    1.511419653892517,
    1.51226007938385,
    1.4972271919250488,
    1.4957451820373535,
    1.5066016912460327,
    1.4973012208938599,
    1.5021053552627563,
    1.4823817014694214,
    1.4819743633270264,
    1.4836505651474,
    1.4716722965240479,
    1.4866390228271484,
    1.4768939018249512,
    1.4871505498886108,
    1.483359932899475,
    1.485206961631775,
    1.4834990501403809,
    1.475825548171997,
    1.4832261800765991,
    1.5056694746017456,
    1.5026017427444458,
    1.47711181640625,
    1.4986451864242554,
    1.4977326393127441,
    1.5224590301513672,
    1.524806261062622,
    1.5271328687667847,
    1.53366219997406,
    1.563698172569275,
    1.545275330543518,
    1.5652549266815186,
    1.5509860515594482,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    3.485222578048706,
    3.439197301864624,
    3.381014823913574,
    3.3270020484924316,
    3.2642831802368164,
    3.213212013244629,
    3.19498610496521,
    3.1335089206695557,
    3.090076446533203,
    3.055725336074829,
    2.9993879795074463,
    2.9843122959136963,
    2.9417223930358887,
    2.90376353263855,
    2.8761744499206543,
    2.8324663639068604,
    2.7958970069885254,
    2.7895455360412598,
    2.757847547531128,
    2.741499900817871,
    2.721949815750122,
    2.695338010787964,
    2.674868106842041,
    2.6444618701934814,
    2.6538925170898438,
    2.779775381088257,
    2.906625747680664,
    3.0591907501220703,
    3.2408688068389893,
    3.435839891433716,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    3.458451271057129,
    3.3601741790771484,
    3.3074934482574463,
    3.2227892875671387,
    3.142350435256958,
    3.081008195877075,
    3.0163865089416504,
    2.9457027912139893,
    2.887281894683838,
    2.833275318145752,
    2.7991509437561035,
    2.7336347103118896,
    2.693347454071045,
    2.655975818634033,
    2.60473370552063,
    2.5781025886535645,
    2.543245315551758,
    2.5018131732940674,
    2.4547460079193115,
    2.436450242996216,
    2.4021804332733154,
    2.3865106105804443,
    2.355328321456909,
    2.315729856491089,
    2.310108184814453,
    2.2751669883728027,
    2.245482921600342,
    2.212374448776245,
    2.218782663345337,
    2.193544387817383,
    2.175403594970703,
    2.144793748855591,
    2.131166934967041,
    2.13126277923584,
    2.1520180702209473,
    2.27923846244812,
    2.385993003845215,
    2.510620355606079,
    2.652235507965088,
    2.828927755355835,
    2.9951791763305664,
    3.2148666381835938,
    3.424569606781006,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
    inf,
)
TEST_RUNS = [30, 1, 8, 15, 27, 33, 24, 30, 51, 43, 98]
TEST_VALUES = [
    3.453223466873169,
    2.6174943447113037,
    2.5482518672943115,
    2.484649658203125,
    2.421760082244873,
    2.375002384185791,
    2.3119006156921387,
    2.292886257171631,
    2.2166736125946045,
    2.1875782012939453,
    2.1466281414031982,
    2.109262704849243,
    2.0732874870300293,
    2.0260651111602783,
    2.011146306991577,
    1.9837716817855835,
    1.5204654932022095,
    1.511419653892517,
    1.51226007938385,
    1.4972271919250488,
    1.4957451820373535,
    1.5066016912460327,
    1.4973012208938599,
    1.5021053552627563,
    1.4823817014694214,
    1.4819743633270264,
    1.4836505651474,
    1.4716722965240479,
    1.4866390228271484,
    1.4768939018249512,
    1.4871505498886108,
    1.483359932899475,
    1.485206961631775,
    1.4834990501403809,
    1.475825548171997,
    1.4832261800765991,
    1.5056694746017456,
    1.5026017427444458,
    1.47711181640625,
    1.4986451864242554,
    1.4977326393127441,
    1.5224590301513672,
    1.524806261062622,
    1.5271328687667847,
    1.53366219997406,
    1.563698172569275,
    1.545275330543518,
    1.5652549266815186,
    1.5509860515594482,
    3.485222578048706,
    3.439197301864624,
    3.381014823913574,
    3.3270020484924316,
    3.2642831802368164,
    3.213212013244629,
    3.19498610496521,
    3.1335089206695557,
    3.090076446533203,
    3.055725336074829,
    2.9993879795074463,
    2.9843122959136963,
    2.9417223930358887,
    2.90376353263855,
    2.8761744499206543,
    2.8324663639068604,
    2.7958970069885254,
    2.7895455360412598,
    2.757847547531128,
    2.741499900817871,
    2.721949815750122,
    2.695338010787964,
    2.674868106842041,
    2.6444618701934814,
    2.6538925170898438,
    2.779775381088257,
    2.906625747680664,
    3.0591907501220703,
    3.2408688068389893,
    3.435839891433716,
    3.458451271057129,
    3.3601741790771484,
    3.3074934482574463,
    3.2227892875671387,
    3.142350435256958,
    3.081008195877075,
    3.0163865089416504,
    2.9457027912139893,
    2.887281894683838,
    2.833275318145752,
    2.7991509437561035,
    2.7336347103118896,
    2.693347454071045,
    2.655975818634033,
    2.60473370552063,
    2.5781025886535645,
    2.543245315551758,
    2.5018131732940674,
    2.4547460079193115,
    2.436450242996216,
    2.4021804332733154,
    2.3865106105804443,
    2.355328321456909,
    2.315729856491089,
    2.310108184814453,
    2.2751669883728027,
    2.245482921600342,
    2.212374448776245,
    2.218782663345337,
    2.193544387817383,
    2.175403594970703,
    2.144793748855591,
    2.131166934967041,
    2.13126277923584,
    2.1520180702209473,
    2.27923846244812,
    2.385993003845215,
    2.510620355606079,
    2.652235507965088,
    2.828927755355835,
    2.9951791763305664,
    3.2148666381835938,
    3.424569606781006,
]


@pytest.mark.parametrize(
    "ranges, runs, values",
    [
        ([inf, inf, 123, inf], [2, 1, 1], [123]),
        ([2, inf, 123, inf], [0, 1, 1, 1, 1], [2, 123]),
        ([2, 3, 123, inf], [0, 3, 1], [2, 3, 123]),
        ([inf, inf, inf], [3], []),
        ([1, 2, 3], [0, 3], [1, 2, 3]),
        ([], [0], []),
        (TEST_RANGE, TEST_RUNS, TEST_VALUES),
    ],
)
def test_floating_point_list_encoding(ranges, runs, values):
    ret_runs, ret_values = encode_floating_point_list(ranges)
    assert ret_runs == runs
    assert ret_values == values
